CSC C85 - Code Optimization - 2021
_______________________________________________________________________

Team name: Choose the Napkin

Name 1 (last, first): Malik, Faraz
Student number 1: 1008009744

Name 2 (last, first): Nasri, Noor
Student number 2: 1007104036

If applicable:
Name 3 (last, first):
Student number 3:

(Special: Lose marks for failing to complete the above)
_______________________________________________________________________

Questions:

0) On the same computer, and with no other applications open:

   - Run vanilla version, compiled as per the compile script (no compiler
     optimization) and list: Vanilla (no compiler opt) FPS = 9.6
     
   - Run your optimized code, compiled without compiler optimization
     and list: Your Code (no compiler opt) FPS = 28.46666

   - Run vanilla code compiled with flag -O3 for compiler optimization
     and list: Vanilla (compiler optimized) FPS = 23.4666
     
   - Run your optimized code, compiled with flag -O3
     and list: Your Code (compiler optimized) FPS = 71.4
     
     What is the ratio of your code (compiler optimized) to vanilla
     with no compiler optimization?
     
     Ratio = Vanilla(no compiler opt) FPS / Your code(compiler optimized) FPS
           = 7.437^-1
     
a) Look at the profiler output for vanilla_imageRescale(). Identify the
   lines that you think are un-necessary bottlenecks (i.e. lines whose
   CPU usage can be reduced or eliminated by careful coding).

   List these bottleneck lines in descending order (i.e. the ones that
   consume most time at the top) of CPU time. Please list
	- The actual line of code
	- The amount of time taken
	(you can copy/paste from the profiler output)

   1. getPixel(src,floor(fx),floor(fy),src_x,&R1,&G1,&B1); (Ir 1.55+0.7+3.94)
   The line creates a bottleneck since it takes 1.55 instructions for casting floor output from double to int as the function requires,
   and 0.7 for both floor calls, then 3.94 for the actual function execution which does a complex set of calculations to the image pointer before
   assigning R, G, and B from memory. This is true for all 4 times it is called.

   2. setPixel(dst,x,y,dest_x,R,G,B); (Ir 0.84+4.08)
   This line takes 4.08 instructions to actually execute 3 writes to memory, then 0.84 instructions outside of the function call. I imagine the 0.84 instructions
   aren't actual computations, but rather cache misses as almost all arguments have not been accessed for a while. setPixel also does the same thing as getPixel from a
   performance standpoint, although some extra time might be due to the fact that this is the first time these specific bytes in dst are being written to

   3. RT1=(dx*R2)+(1-dx)*R1; (Ir 1.12)
   I think that majority of the time for this line is used for the implicit cast from unsigned char to double (R1 and R2). The reason I
   think this line is improvable is that (1-dx) can be done beforehand and stored once (as this line is repeated 8 times). 

   4. R=(unsigned char)((dy*RT2)+((1-dy)*RT1)); (Ir 0.63)
   This line has to first do some double multiplication and addition, then a cast from double to unsigned char. Since casting is expensive, I think that the
   cost of this line is split between the cast and computations.

   For each line, explain why the line creates a bottleneck (in terms
   of what you know about CPU architecture). I want specific reasons
   why a line you listed takes a large chunk of CPU time.

b) For each of the lines in a)

   Describe what you did in fast_imageRescale() to reduce/resolve the
   problem.

   1. For floor and ceiling functions, make a faster alternative. Since the C floor and ceil functions are careful to factor 
   both overflows and negative numbers (something we dont expect to happen), we can implement our own floors using integer casting. For ceil,
   I just floor but add an amount that is almost one. This floor approximation is incorrect for a very small range of values, a range I also
   do not expect to matter in this application.
   My floor and ceil functions also return ints, to no casting required.
   For actually getting, I precompute the pixel address in src so I dont have to do it 3 times. I also split my RAM queries into top and bottom, 
   and do the top calculations in between, so when I actually get to bottom pixel calculations, the R3..G4 will be higher up in cache.
   2. Similar to above, I also precompute the dstination pixel address.
   3. Precompute 1-dx (idx)
   4. Precompute 1-dy (idy)

   Explain why your improvement should work (again, based on what you
   know about CPU architecture).

c) List any other optimizations you performed in your code and why they
   help increase speed

   - Use samey to check if top 2 pixels are the same as bottom two pixels. If it is, we saved doing the second half of the calculations. If
   not, the we only need to add srx_x to our previous pixel pointers to get the new pointers (as opposed to recalcualting of of x and y)

   - Reordered the loop order so that we go column by column, then go down rows. This is the same way the image is stored im memory, to help with cacheing.
   - Got rid of function calls, and only used macros so no stack stuff
   - Moved y computations outside of the x loop, so only x stuff is computed every pixel

d) Is there any part of the vanilla code that could not be optimized
   at all? if so, which?

   - I could not find a faster way to read the values from memory. I experimented with casting src to an int_64 type then using bitmasks to
   read individual bytes but I think the computational costs of the bitmasks would have outweighed the saved calls to memory.
   
e) Now run your code with cache sim on. Identify the lines that you see
   causing cache misses, and for each of these please list:
   
    - The line of code
    - The number of cache misses it caused
    (you can copy/paste from the profiler output)

   1.  RT1=idx*R1+(dx*R2) (4.43 D1mr);
   I am not sure what is causing this miss. There is no branching before this, and idx, idx, dx, and dy
   were written to pretty recently. This is a cache read miss, so I'm not sure what
   else is being read for this instruction.

   2. *p1 = (unsigned char)(RT1); (2.77 D1mw)
   This is a write miss caused by writing to a location in memory that has not been written to ever. Since by
   going in the order of how the pixels were stored guarantees a write to the previous byte last
   loop iteration, I am not sure what is causing the write to miss.
    
   Describe any strategy you can come up with that may help reduce these
   cache misses.

f) Do you think you have achieved close to optimal performance on this
   code? (yes/no) no

g) If your answer to d) is no, what could you do to further increase
   performance?

   Do 64 bit reads on memory and instead of using bitmasks loop and bit shift (I could not get that to work)

______________________________________________________________________

Grading

Programming exercise
	- Competitive performance of your code	 	/80	
             Your FPS multiplier:     (Max:  )

Answers in this report					        /20

Penalty marks (TA assigned)			  

Total for this exercise:			   	/100 (*)

(*) This mark is conditional to all team members being able to explain
    any part of the work when questioned.
